"""init database

Revision ID: c5d58a9272a8
Revises: 
Create Date: 2024-07-27 22:38:56.924020

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

from configs.settings import APP_ADMIN_NAME, APP_ADMIN_EMAIL
from schemas.authentication.passwords_schema import PasswordBase
from datetime import date


# revision identifiers, used by Alembic.
revision: str = 'c5d58a9272a8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA IF NOT EXISTS "authentication"')

    group_table = op.create_table('group',
                                  sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                                  sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                                  sa.Column('id', sa.Integer(), nullable=False),
                                  sa.PrimaryKeyConstraint('id'),
                                  sa.UniqueConstraint('code'),
                                  schema='authentication')

    user_table = op.create_table('user',
                                 sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                                 sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                                 sa.Column('id', sa.Integer(), nullable=False),
                                 sa.Column('is_active', sa.Boolean(), nullable=False),
                                 sa.PrimaryKeyConstraint('id'),
                                 schema='authentication')

    password_table = op.create_table('password',
                                     sa.Column('creation_date', sa.DateTime(), nullable=False),
                                     sa.Column('is_active', sa.Boolean(), nullable=False),
                                     sa.Column('expiration_date', sa.Date(), nullable=True),
                                     sa.Column('id', sa.Integer(), nullable=False),
                                     sa.Column('user_id', sa.Integer(), nullable=False),
                                     sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=120), nullable=False),
                                     sa.ForeignKeyConstraint(['user_id'], ['authentication.user.id'], ),
                                     sa.PrimaryKeyConstraint('id'),
                                     schema='authentication')

    user_group_link_table = op.create_table('user_group_link',
                                            sa.Column('user_id', sa.Integer(), nullable=False),
                                            sa.Column('group_id', sa.Integer(), nullable=False),
                                            sa.ForeignKeyConstraint(['group_id'], ['authentication.group.id'], ),
                                            sa.ForeignKeyConstraint(['user_id'], ['authentication.user.id'], ),
                                            sa.PrimaryKeyConstraint('user_id', 'group_id'),
                                            sa.UniqueConstraint('user_id', 'group_id', name='unique_user_group_constraint'),
                                            schema='authentication')
    # ### end Alembic commands ###

    # DEFAULT DATA
    roles = [{"code": "ADMINISTRATOR", "description": "Administrator privileges role"},
             {"code": "SELECT", "description": "Basic select role"},
             {"code": "INSERT", "description": "Basic insert role"},
             {"code": "DEFAULT", "description": "Default role"}]

    user = [{"email": APP_ADMIN_EMAIL, "full_name": APP_ADMIN_NAME, "is_active": True}]

    op.bulk_insert(group_table, roles)
    op.bulk_insert(user_table, user)

    op.execute(f"""
            INSERT INTO "authentication"."user_group_link"("user_id", "group_id")
            VALUES ((SELECT "id" FROM "authentication"."user" WHERE "email"='{APP_ADMIN_EMAIL}'),
                    (SELECT "id" FROM "authentication"."group" WHERE "code"='ADMINISTRATOR')),

                   ((SELECT "id" FROM "authentication"."user" WHERE "email"='{APP_ADMIN_EMAIL}'),
                    (SELECT "id" FROM "authentication"."group" WHERE "code"='SELECT')),

                   ((SELECT "id" FROM "authentication"."user" WHERE "email"='{APP_ADMIN_EMAIL}'),
                    (SELECT "id" FROM "authentication"."group" WHERE "code"='INSERT')),

                   ((SELECT "id" FROM "authentication"."user" WHERE "email"='{APP_ADMIN_EMAIL}'),
                    (SELECT "id" FROM "authentication"."group" WHERE "code"='DEFAULT'))
        """)

    hashed_password = PasswordBase.set_password("default_admin")  # please change
    today = date.today().isoformat()
    op.execute(f"""
            INSERT INTO "authentication"."password" ("user_id", "is_active", "hashed_password", "creation_date")
            VALUES ((SELECT "id" FROM "authentication"."user" WHERE "email"='{APP_ADMIN_EMAIL}'), 
                    true,
                    '{hashed_password}',
                    '{today}')
        """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_group_link', schema='authentication')
    op.drop_table('password', schema='authentication')
    op.drop_table('user', schema='authentication')
    op.drop_table('group', schema='authentication')
    op.execute('DROP SCHEMA IF EXISTS "authentication"')
    # ### end Alembic commands ###
