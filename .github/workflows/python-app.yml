# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: API Workflow

on:
  push:
    branches: [ "main" ]

jobs:
  build_app:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.11"]
    
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # Provide the password for postgres
        env:
          POSTGRES_USER: ${{secrets.DB_USER}}
          POSTGRES_PASSWORD: ${{secrets.DB_PASS}}
          POSTGRES_DB: ${{secrets.DB_TEST}}
        ports:
          - 5432:5432
          
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Connect to postgres
      run: alembic upgrade head
      env:
        DB_DRIVER: ${{ secrets.DB_DRIVER }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{secrets.DB_PORT}}
        DB_USER: ${{secrets.DB_USER}}
        DB_PASS: ${{secrets.DB_PASS}}
        UNITTEST: "True"
        DB_TEST: ${{secrets.DB_TEST}}
        SECRET_KEY: ${{secrets.SECRET_KEY}}
        SENTRY_DNS: ${{secrets.SENTRY_DNS}}
        JWT_SECRET: ${{secrets.JWT_SECRET}}
        JWT_ALGORITHM: ${{secrets.JWT_ALGORITHM}}
        DB_ASYNC_DRIVER: ${{secrets.DB_ASYNC_DRIVER}}
        CRYPTO_KEY: ${{secrets.CRYPTO_KEY}}
        APP_ADMIN_EMAIL: ${{secrets.APP_ADMIN_EMAIL}}
        APP_ADMIN_NAME: ${{secrets.APP_ADMIN_NAME}}


    - name: Unit Test
      run: pytest --junitxml=res-test.xml --cov --cov-report=xml:coverage.xml
      env:
        DB_DRIVER: ${{ secrets.DB_DRIVER }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{secrets.DB_PORT}}
        DB_USER: ${{secrets.DB_USER}}
        DB_PASS: ${{secrets.DB_PASS}}
        UNITTEST: "True"
        DB_TEST: ${{secrets.DB_TEST}}
        SECRET_KEY: ${{secrets.SECRET_KEY}}
        SENTRY_DNS: ${{secrets.SENTRY_DNS}}
        JWT_SECRET: ${{secrets.JWT_SECRET}}
        JWT_ALGORITHM: ${{secrets.JWT_ALGORITHM}}
        DB_ASYNC_DRIVER: ${{secrets.DB_ASYNC_DRIVER}}
        CRYPTO_KEY: ${{secrets.CRYPTO_KEY}}
        APP_ADMIN_EMAIL: ${{secrets.APP_ADMIN_EMAIL}}
        APP_ADMIN_NAME: ${{secrets.APP_ADMIN_NAME}}

    - name: Publish Test Report
      uses: MishaKav/pytest-coverage-comment@main
      if: success() || failure()
      with:
        junitxml-path: res-test.xml
        pytest-xml-coverage-path: coverage.xml
